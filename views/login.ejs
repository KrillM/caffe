<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('fragments/header') %>
    <title>회원가입 페이지</title>
</head>
<body>
    <%- include('fragments/navbar') %>
    <form class="crewForm">
        <div class="row mb-3">
            <label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>
            <div class="col-sm-10">
                <input type="email" class="form-control" id="inputEmail3" onblur="validateEmail()">
                <div id="emailValidationMessage" style="color: red;"></div>
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
            <div class="col-sm-10">
                <input type="password" class="form-control" id="inputPassword3" oninput="validatePassword()">
                <div id="passwordValidationMessage" style="color: red;"></div>
            </div>
        </div>

        <button type="submit" class="btn btn-success">Log-In</button>
    </form>
    <%- include('fragments/footer') %>

    <script>
        function validateEmail() {
            var emailInput = document.getElementById('inputEmail3');
            var emailValidationMessage = document.getElementById('emailValidationMessage');
            var email = emailInput.value;

            // 간단한 이메일 유효성 검사 (본 예제는 간단한 형식만을 확인)
            var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

            if (!emailRegex.test(email)) {
                // 유효하지 않은 이메일 주소인 경우
                emailValidationMessage.textContent = '유효하지 않은 이메일 주소입니다.';
                return;
            }

            // 서버로 이메일 중복 확인 요청 (가상의 함수, 실제로는 서버와 통신해야 함)
            if (!(isEmailRegistered(email))) {
                emailValidationMessage.textContent = '등록되지 않은 이메일 주소입니다.';
            } else {
                emailValidationMessage.textContent = '';
            }

            console.log(email);
        }

        // 가상의 함수: 이미 등록된 이메일인지 확인
        function isEmailRegistered(email) {
            // 여기에서 실제로 서버에 요청하여 이메일이 이미 등록되었는지 확인하는 로직을 추가
            // 이 함수는 이메일이 이미 등록되었다면 true를 반환하고, 그렇지 않으면 false를 반환
            // 실제 서버 요청은 비동기적으로 이루어질 수 있으므로 주의
            // 가상의 예제에서는 항상 등록되지 않은 것으로 가정
            return false;
        }

        function validatePassword() {
            var passwordInput = document.getElementById('inputPassword3');
            var passwordValidationMessage = document.getElementById('passwordValidationMessage');
            var password = passwordInput.value;

            // 비밀번호 길이가 8에서 50 사이인지 확인
            if (password.length < 8 || password.length > 50) {
                passwordValidationMessage.textContent = '비밀번호는 8에서 50 글자 이내여야 합니다.';
                return;
            }

            // 대문자, 소문자, 특수기호, 숫자가 각각 하나 이상 포함되어 있는지 확인
            if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/[!@#$%^&*(),.?":{}|<>0-9]/.test(password)) {
                passwordValidationMessage.textContent = '비밀번호는 대문자, 소문자, 특수기호, 숫자가 각각 하나 이상 포함되어야 합니다.';
                return;
            }

            // 실제로는 서버와 통신하여 비밀번호를 확인 (가상의 함수)
            if (!checkPassword(password)) {
                passwordValidationMessage.textContent = '비밀번호가 틀렸습니다.';
            } else {
                passwordValidationMessage.textContent = '';
            }
        }

        // 가상의 함수: 실제로는 서버와 통신하여 비밀번호를 확인
        function checkPassword(password) {
            // 여기에서 실제로 서버에 요청하여 비밀번호가 맞는지 확인하는 로직을 추가
            // 이 함수는 비밀번호가 맞으면 true를 반환하고, 그렇지 않으면 false를 반환
            // 실제 서버 요청은 비동기적으로 이루어질 수 있으므로 주의
            // 가상의 예제에서는 항상 비밀번호가 맞는 것으로 가정
            return true;
        }
    </script>
</body>
</html>